args(bayesControls)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(samples = 10000, thin = 25),
useMCores = F)
summary(flatPrior_fit)
library(icenReg)
library(foreach)
library(doParallel)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
library(icenReg)
library(foreach)
library(doParallel)
data(miceData)
head(miceData)
summary(miceData)
library(icenReg)
library(foreach)
library(doParallel)
data(miceData)
head(miceData)
summary(miceData)
all_times <- c(miceData$l, miceData$u)
C_i = all_times[all_times > 0 & all_times < Inf]
hist(C_i,
xlab = "Observation Times",
main = "Histogram of Observation Times")
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
logPostDens <- flatPrior_fit$logPosteriorDensities
summary(logPostDens[[1]])
summary(logPostDens[[2]])
summary(logPostDens[[3]])
summary(logPostDens[[4]])
plot(flatPrior_fit[[1]])
plot(flatPrior_fit$samples[[1]])
plot(flatPrior_fit$samples)
is(flatPrior_fit$samples)
plot(flatPrior_fit$mcmcList[[1]])
plot(flatPrior_fit$mcmcList[[2]])
plot(flatPrior_fit$mcmcList[[3]])
plot(flatPrior_fit$mcmcList[[4]])
plot(flatPrior_fit$mcmcList[[3]])
bad_logShpae <- flatPrior_fit$mcmcList[[3]][,1]
bad_logPostDens <- flatPrior_fit$logPosteriorDensities[[3]]
plot(bad_logShpae, bad_logPostDens)
plot(as.vector(bad_logShpae), bad_logPostDens)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 10),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 100),
useMCores = F)
summary(flatPrior_fit)
flatPrior_fit$MAP_ind
flatPrior_fit$samples[1,]
flatPrior_fit$mcmcList[1,]
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 1),
useMCores = F)
summary(flatPrior_fit)
flatPrior_fit$MAP_ind
flatPrior_fit$samples[1,]
mle_fit <- ic_par(cbind(l, u) ~ grp, data = miceData)
summary(mle_fit)
library(icenReg)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 1),
useMCores = F)
flatPrior_fit$MAP_dens
mle_fit
flatPrior_fit
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 10),
useMCores = F)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 10),
useMCores = F)
stopCluster(myClust)
library(icenReg)
library(foreach)
library(doParallel)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 10),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
flatPrior_fit$MAP_dens
mle_fit
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 5),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
flatPrior_fit$MAP_dens
plot(flatPrior_fit$mcmcList)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 5,
samples = 2500),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
set.seed(123)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 5,
samples = 2500),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
set.seed(123)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 5,
samples = 10000),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 5,
samples = 10000),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
summary(flatPrior_fit)
flatPrior_fit$MAP_dens
flatPrior_fit$MAP_ind
summary(flatPrior_fit$logPosteriorDensities[[1]])
summary(flatPrior_fit$logPosteriorDensities[[2]])
summary(flatPrior_fit$logPosteriorDensities[[3]])
summary(flatPrior_fit$logPosteriorDensities[[4]])
set.seed(12345)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
library(icenReg)
library(doParallel)
library(foreach)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
coef(mle_fit)
ls(mle_fit)
library(icenReg)
library(foreach)
library(doParallel)
bayesControls()
args(ic_bayes)
library(icenReg)
library(foreach)
library(doParallel)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
plot(flatPrior_fit$mcmcList)
set.seed(1)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(thin = 10),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
set.seed(123)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
summary(flatPrior_fit)
set.seed(12345)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
summary(flatPrior_fit)
args(bayesControls)
bayesControls()
set.seed(12345)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit)
plot(flatPrior_fit$mcmcList)
summary(flatPrior_fit)
plot(flatPrior_fit$mcmcList)
plot(flatPrior_fit$mcmcList)
summary(flatPrior_fit$mcmcList)
set.seed(12345)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(samples = 30000),
useMCores = F)
stopCluster(myClust)
summary(flatPrior_fit)
plot(flatPrior_fit$mcmcList)
set.seed(123)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
set.seed(1234)
myClust <- makeCluster(4)
registerDoParallel(myClust)
flatPrior_fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData,
model = 'ph', dist = 'weibull',
controls = bayesControls(),
useMCores = F)
stopCluster(myClust)
plot(flatPrior_fit$mcmcList)
summary(flatPrior_fit)
# Fitting MLE
mle_fit <- ic_par(cbind(l, u) ~ grp,
data = miceData)
library(icenReg)
library(foreach)
library(doParallel)
# Fitting MLE
mle_fit <- ic_par(cbind(l, u) ~ grp,
data = miceData)
coef(mle_fit)
data(miceData)
# Fitting MLE
mle_fit <- ic_par(cbind(l, u) ~ grp,
data = miceData)
coef(mle_fit)
expertPrior <- function(x){
# Extracting parameters from input
shape <- exp(x[1])
scale <- exp(x[2])
ge_coef <- x[3]
# ans is log-density of the prior
ans <- 0
# First prior: S(730) ~ beta(4, 16)
s_730 = 1 - pweibull(730, shape = shape, scale = scale)
ans = ans + dbeta(s_730, 4, 16, log = T)
# Second prior: shape >= 1
if(shape < 1) ans = -Inf
return(ans)
}
bayes_fit <- ic_bayes(cbind(l,u) ~ grp,
data = miceData,
model = 'ph', dist = 'weibull',
logPriorFxn = expertPrior)
summary(bayes_fit)
# Fitting MLE
mle_fit <- ic_par(cbind(l, u) ~ grp,
model = 'ph',
dist  = 'weibull',
data = miceData)coef(mle_fit)
coef(mle_fit)
# Fitting MLE
mle_fit <- ic_par(cbind(l, u) ~ grp,
model = 'ph',
dist  = 'weibull',
data = miceData)
coef(mle_fit)
expertPrior <- function(x){
# Extracting parameters from input
shape <- exp(x[1])
scale <- exp(x[2])
ge_coef <- x[3]
# ans is log-density of the prior
ans <- 0
# First prior: S(730) ~ beta(4, 16)
# Note that we are using a Weibull distribution
s_730 = 1 - pweibull(730, shape = shape, scale = scale)
ans = ans + dbeta(s_730, 4, 16, log = T)
# Second prior: shape >= 1
if(shape < 1) ans = -Inf
return(ans)
}
plot(bayes_fit,
col = 'blue',
main = "Posterior Baseline Survival")
plot(bayes_fit,
newdata = newdata,
col = c('blue', 'orange'),
lwd = 2,
main = 'Informative Prior Fit',
cis = F)
newdata <- data.frame(grp = c('ce', 'ge'))
rownames(newdata) <- c("Conventional", "Germ-free")
plot(bayes_fit,
newdata = newdata,
col = c('blue', 'orange'),
lwd = 2,
main = 'Informative Prior Fit',
cis = F)
plot(bayes_fit,
newdata = newdata,
col = c('blue', 'orange'),
lwd = 2,
cis = F)
plot(bayes_fit,
newdata = newdata,
main = "Comparing Survival Curves",
col = c('blue', 'orange'),
lwd = 2,
cis = F)
survCIs(bayes_fit,
newdata = newdata,
p = seq(from = 0.1, to = 0.9, by = .2),
ci_level = 0.95)
library(icenReg)
library(foreach)
library(doParallel)
myClust <- makeCluster(4)
registerDoParallel(myClust)
bayes_fit <- ic_bayes(cbind(l,u) ~ grp,
data = miceData,
model = 'ph', dist = 'weibull',
logPriorFxn = expertPrior)
stopCluster(myClust)
myClust <- makeCluster(4)
registerDoParallel(myClust)
bayes_fit <- ic_bayes(cbind(l,u) ~ grp,
data = miceData,
model = 'ph', dist = 'weibull',
logPriorFxn = expertPrior,
useMCores = T)
stopCluster(myClust)
summary(bayes_fit)
newdata <- data.frame(grp = c('ce', 'ge'))
rownames(newdata) <- c("Conventional", "Germ-free")
fit <- ic_par(cbind(l, u) ~ grp, data = miceData, dist = 'loglogistic')
plot(bayes_fit$mcmcList)
length(bayes_fit$mcmcList)
library(icenReg)
library(icenReg)
simdata <- simIC_weib(n = 500,
b1 = 1, b2 = .5)
# Shifting variable to demonstrate covariate recentering issue
# (discussed below)
simdata$x1 = simdata$x1 + 5
par_fit <- ic_par(cbind(l, u)~ x1 * x2, data = simdata)
# covariate set I am will be demonstrating with
new_data = data.frame(x1 = 2, x2 = 1)
# expandX is taking in new_data and turning it into a matrix
# for you. For example, note that the interaction term was made
myCov = icenReg:::expandX(par_fit$formula,
data = new_data,
par_fit)
myCov
# An issue that might be a bit of a nusiance is that
# icenReg automatically recenters covariates, i.e. column means
# are subtracted away from each column of the constructed matrix
# (this is done for technical reasons to speed up ic_sp)
# So you *might* want to subtract the column means of original
# data from your new covariates too. Don't really need to
# if you're just interested in comparing linear predictors
# for two given sets of covariates; both will just be shifted
# by the same amount! But if you do, here's how you would shift:
myCov = myCov - par_fit$covarOffset
myCov
predict(par_fit, "lp", new_data)
all_coefs <- coef(par_fit)
all_covariance <- vcov(par_fit)
# Note that for ic_sp models, the covariance matrix
# does not include entries for baseline parameters
# First two values are baseline parameters,
# but we don't care for about those for the linear predictors
use_coefs <- all_coefs[3:5]
use_covar <- all_covariance[3:5,3:5]
#     Step 2: compute the mean and variance of linear predictor
lp_mean = sum(myCov * use_coefs)
lp_mean
?ic_bayes
citation('icenReg')
load( "~/Desktop/temp2.dat" )
temp <- data.table( temp )
temp <- na.omit( temp, cols = c( 1, 3:ncol( temp ) ) )
fit <- ic_sp( Surv( Left, Right, type = "interval2" ) ~ Neme + ns( AGE, df = 3 ) + DIABCOMPLV1 + SinfarktV1 + SerszV1 + SszelutV1 +
highWAIST + ns( BMIV1, df = 3 ) + GFRV1 + PADgroupV1 + ScoreV1 + ns( RRsystV1, df = 3 ) +
ns( RRdiastV1, df = 3 ), data = temp, model = "ph", bs_samples = 1000 )
library( icenReg )
library( splines )
temp <- na.omit( temp, cols = c( 1, 3:ncol( temp ) ) )
fit <- ic_sp( Surv( Left, Right, type = "interval2" ) ~ Neme + ns( AGE, df = 3 ) + DIABCOMPLV1 + SinfarktV1 + SerszV1 + SszelutV1 +
highWAIST + ns( BMIV1, df = 3 ) + GFRV1 + PADgroupV1 + ScoreV1 + ns( RRsystV1, df = 3 ) +
ns( RRdiastV1, df = 3 ), data = temp, model = "ph", bs_samples = 1000 )
var1 <- c("cat", "dog", "frog")
var2 <- c("cow", "pig", "sheep")
for(i in 1:3){
name1 = var1[i]
name2 = var2[i]
cat("The ", name1, "at the ", name2, "\n")
}
var1 <- c("cat", "dog", "frog")
var2 <- c("cow", "pig", "sheep")
for(i in 1:3){
name1 = var1[i]
name2 = var2[i]
cat("The ", name1, "ate the ", name2, "\n")
}
setwd("~/Desktop/icenReg_devel/Code/icenReg")
library(devtools)
document()
document()
document()
library(Rcpp)
compileAttributes()
compileAttributes(verbose = T)
document()
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
list.files()
library(devtools)
library(Rcpp)
compileAttributes(verbose = T)
library(devtools)
document()
remove.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
list.files()
library(Rcpp)
compileAttributes(verbose = T)
compileAttributes(verbose = T)
