id_form = id ~ 1 + x2
id2_form = id2 ~ 1 + x2
data_list = icenME:::expandREData(simdata,
resp_form = resp_form,
fixed_form = fixed_form,
rand_forms = list(id_form, id2_form)
)
init_vals = icenME:::generate_inits(data_list, alpha_len = 2)
init_priors = icenME:::generate_default_priors(init_vals)
my_model = makeModel(init_vals, data_list, init_priors)
my_swarmer = swarmSampler(model = my_model)
samples <- my_swarmer$genSample(n = 100, my_swarmer$info)
ws = my_swarmer$getImportanceWeights(samples)
library(mvtnorm)
library(icenME)
library(icenReg)
swarmSampler = setRefClass("swarmSampler",
methods = c('getImportanceWeights',
'targetDens'),
fields = c('model',
'genSample',
'propDens',
'updateInfo',
'info',
'savedSamples')
)
swarmSampler$methods(
initialize = function(model,
gen_sample = normalSample,
prop_dens = normDens,
update_info = updateNormal){
model <<- model
genSample <<- gen_sample
propDens  <<- prop_dens
updateInfo <<- update_info
cur_vals = getAllVals(model)
info <<- list(mu = cur_vals,
sigma = diag(0.1, length(cur_vals)))
}
)
swarmSampler$methods(
targetDens = function(vals){
ans = numeric(nrow(vals))
for(i in seq_along(ans)){
ans[i] = setAndCalcAll(vals[i,], model)
}
return(ans)
}
)
swarmSampler$methods(
getImportanceWeights = function(vals){
ans = targetDens(vals) - propDens(vals, info)
ans = exp(ans)
return(ans)
}
)
normalSample = function(n, info){
mu = info$mu
sigma = info$sigma
ans = rmvnorm(n, mean = mu, sigma = sigma)
return(ans)
}
normDens = function(x, info){
mu = info$mu
sigma = info$sigma
ans = dmvnorm(x, mu, sigma, log = T)
return(ans)
}
updateNormal = function(vals, weights, info, addError = 0.1){
avg_results = cov.wt(vals, w = weights)
info$mu = avg_results$center
sigma = avg_results$cov
diag(sigma) = diag(sigma) + addError
info$sigma = sigma
return(info)
}
n = 400
simdata = simIC_weib(n)
simdata$id = rep(c('cat','dog'), n/2)
simdata$id2 = c(rep("cow", n/2), rep("hen", n/2))
resp_form = ~ cbind(l, u) + 0
fixed_form = ~ x1 + 0
id_form = id ~ 1 + x2
id2_form = id2 ~ 1 + x2
data_list = icenME:::expandREData(simdata,
resp_form = resp_form,
fixed_form = fixed_form,
rand_forms = list(id_form, id2_form)
)
init_vals = icenME:::generate_inits(data_list, alpha_len = 2)
init_priors = icenME:::generate_default_priors(init_vals)
my_model = makeModel(init_vals, data_list, init_priors)
my_swarmer = swarmSampler(model = my_model)
samples <- my_swarmer$genSample(n = 100, my_swarmer$info)
ws = my_swarmer$getImportanceWeights(samples)
library(mvtnorm)
library(icenME)
library(icenReg)
swarmSampler = setRefClass("swarmSampler",
methods = c('getImportanceWeights',
'targetDens'),
fields = c('model',
'genSample',
'propDens',
'updateInfo',
'info',
'savedSamples')
)
swarmSampler$methods(
initialize = function(model,
gen_sample = normalSample,
prop_dens = normDens,
update_info = updateNormal){
model <<- model
genSample <<- gen_sample
propDens  <<- prop_dens
updateInfo <<- update_info
cur_vals = getAllVals(model)
info <<- list(mu = cur_vals,
sigma = diag(0.1, length(cur_vals)))
}
)
swarmSampler$methods(
targetDens = function(vals){
ans = numeric(nrow(vals))
for(i in seq_along(ans)){
ans[i] = setAndCalcAll(vals[i,], model)
}
return(ans)
}
)
swarmSampler$methods(
getImportanceWeights = function(vals){
ans = targetDens(vals) - propDens(vals, info)
ans = exp(ans)
return(ans)
}
)
normalSample = function(n, info){
mu = info$mu
sigma = info$sigma
ans = rmvnorm(n, mean = mu, sigma = sigma)
return(ans)
}
normDens = function(x, info){
mu = info$mu
sigma = info$sigma
ans = dmvnorm(x, mu, sigma, log = T)
return(ans)
}
updateNormal = function(vals, weights, info, addError = 0.1){
avg_results = cov.wt(vals, w = weights)
info$mu = avg_results$center
sigma = avg_results$cov
diag(sigma) = diag(sigma) + addError
info$sigma = sigma
return(info)
}
n = 400
simdata = simIC_weib(n)
simdata$id = rep(c('cat','dog'), n/2)
simdata$id2 = c(rep("cow", n/2), rep("hen", n/2))
resp_form = ~ cbind(l, u) + 0
fixed_form = ~ x1 + 0
id_form = id ~ 1 + x2
id2_form = id2 ~ 1 + x2
data_list = icenME:::expandREData(simdata,
resp_form = resp_form,
fixed_form = fixed_form,
rand_forms = list(id_form, id2_form)
)
init_vals = icenME:::generate_inits(data_list, alpha_len = 2)
init_priors = icenME:::generate_default_priors(init_vals)
my_model = makeModel(init_vals, data_list, init_priors)
my_swarmer = swarmSampler(model = my_model)
samples <- my_swarmer$genSample(n = 100, my_swarmer$info)
ws = my_swarmer$getImportanceWeights(samples)
library(mvtnorm)
library(icenME)
library(icenReg)
swarmSampler = setRefClass("swarmSampler",
methods = c('getImportanceWeights',
'targetDens'),
fields = c('model',
'genSample',
'propDens',
'updateInfo',
'info',
'savedSamples')
)
swarmSampler$methods(
initialize = function(model,
gen_sample = normalSample,
prop_dens = normDens,
update_info = updateNormal){
model <<- model
genSample <<- gen_sample
propDens  <<- prop_dens
updateInfo <<- update_info
cur_vals = getAllVals(model)
info <<- list(mu = cur_vals,
sigma = diag(0.1, length(cur_vals)))
}
)
swarmSampler$methods(
targetDens = function(vals){
ans = numeric(nrow(vals))
for(i in seq_along(ans)){
ans[i] = setAndCalcAll(vals[i,], model)
}
return(ans)
}
)
swarmSampler$methods(
getImportanceWeights = function(vals){
ans = targetDens(vals) - propDens(vals, info)
ans = exp(ans)
return(ans)
}
)
normalSample = function(n, info){
mu = info$mu
sigma = info$sigma
ans = rmvnorm(n, mean = mu, sigma = sigma)
return(ans)
}
normDens = function(x, info){
mu = info$mu
sigma = info$sigma
ans = dmvnorm(x, mu, sigma, log = T)
return(ans)
}
updateNormal = function(vals, weights, info, addError = 0.1){
avg_results = cov.wt(vals, w = weights)
info$mu = avg_results$center
sigma = avg_results$cov
diag(sigma) = diag(sigma) + addError
info$sigma = sigma
return(info)
}
n = 400
simdata = simIC_weib(n)
simdata$id = rep(c('cat','dog'), n/2)
simdata$id2 = c(rep("cow", n/2), rep("hen", n/2))
resp_form = ~ cbind(l, u) + 0
fixed_form = ~ x1 + 0
id_form = id ~ 1 + x2
id2_form = id2 ~ 1 + x2
data_list = icenME:::expandREData(simdata,
resp_form = resp_form,
fixed_form = fixed_form,
rand_forms = list(id_form, id2_form)
)
init_vals = icenME:::generate_inits(data_list, alpha_len = 2)
init_priors = icenME:::generate_default_priors(init_vals)
my_model = makeModel(init_vals, data_list, init_priors)
my_swarmer = swarmSampler(model = my_model)
samples <- my_swarmer$genSample(n = 100, my_swarmer$info)
ws = my_swarmer$getImportanceWeights(samples)
library(mvtnorm)
library(icenME)
library(icenReg)
swarmSampler = setRefClass("swarmSampler",
methods = c('getImportanceWeights',
'targetDens'),
fields = c('model',
'genSample',
'propDens',
'updateInfo',
'info',
'savedSamples')
)
swarmSampler$methods(
initialize = function(model,
gen_sample = normalSample,
prop_dens = normDens,
update_info = updateNormal){
model <<- model
genSample <<- gen_sample
propDens  <<- prop_dens
updateInfo <<- update_info
cur_vals = getAllVals(model)
info <<- list(mu = cur_vals,
sigma = diag(0.1, length(cur_vals)))
}
)
swarmSampler$methods(
targetDens = function(vals){
ans = numeric(nrow(vals))
for(i in seq_along(ans)){
ans[i] = setAndCalcAll(vals[i,], model)
}
return(ans)
}
)
swarmSampler$methods(
getImportanceWeights = function(vals){
ans = targetDens(vals) - propDens(vals, info)
ans = exp(ans)
return(ans)
}
)
normalSample = function(n, info){
mu = info$mu
sigma = info$sigma
ans = rmvnorm(n, mean = mu, sigma = sigma)
return(ans)
}
normDens = function(x, info){
mu = info$mu
sigma = info$sigma
ans = dmvnorm(x, mu, sigma, log = T)
return(ans)
}
updateNormal = function(vals, weights, info, addError = 0.1){
avg_results = cov.wt(vals, w = weights)
info$mu = avg_results$center
sigma = avg_results$cov
diag(sigma) = diag(sigma) + addError
info$sigma = sigma
return(info)
}
n = 400
simdata = simIC_weib(n)
simdata$id = rep(c('cat','dog'), n/2)
simdata$id2 = c(rep("cow", n/2), rep("hen", n/2))
resp_form = ~ cbind(l, u) + 0
fixed_form = ~ x1 + 0
id_form = id ~ 1 + x2
id2_form = id2 ~ 1 + x2
data_list = icenME:::expandREData(simdata,
resp_form = resp_form,
fixed_form = fixed_form,
rand_forms = list(id_form, id2_form)
)
init_vals = icenME:::generate_inits(data_list, alpha_len = 2)
init_priors = icenME:::generate_default_priors(init_vals)
my_model = makeModel(init_vals, data_list, init_priors)
my_swarmer = swarmSampler(model = my_model)
samples <- my_swarmer$genSample(n = 100, my_swarmer$info)
ws = my_swarmer$getImportanceWeights(samples)
summary(ws)
samples
tst <- my_swarmer$targetDens(samples)
head(tst)
full_lp(my_model)
vals = getAllVals(my_model)
summary(vals)
calc_ab(my_model, get_ab(my_model))
get_ab(my_model)
init_priors$alpha
init_priors$beta
# Chunk 1
# For consistency of poor mixing in Bayes example
set.seed(123)
# Chunk 2
library(icenReg)
# Chunk 3
data(miceData)
head(miceData, 3)
# Chunk 4
np_fit = ic_np(cbind(l, u) ~ grp, data = miceData)
# Chunk 5
groupedFit1 <- ic_np(cbind(l,u) ~ 0, data = miceData)
groupedFit2 <- ic_np(miceData[,c('l', 'u')])
# Chunk 6
plot(np_fit, col = c('blue', 'orange'),
xlab = 'Time', ylab = 'Estimated Survival')
# Chunk 7
data("IR_diabetes")
head(IR_diabetes, 3)
# Chunk 8
fit_ph <- ic_sp(cbind(left, right) ~ gender, model = 'ph',
bs_samples = 100, data = IR_diabetes)
fit_po <- ic_sp(cbind(left, right) ~ gender, model = 'po',
bs_samples = 100, data = IR_diabetes)
# Chunk 9
fit_po
fit_ph
# Chunk 10
newdata <- data.frame(gender = c('male', 'female') )
rownames(newdata) <- c('males', 'females')
plot(fit_po, newdata)
# Chunk 11
fit_po_gamma <- ic_par(cbind(left, right) ~ gender,
data = IR_diabetes, model = "po", dist = "gamma")
# Chunk 12
fit_po_gamma
# Chunk 13
plot(fit_po_gamma, newdata, lgdLocation = "topright")
# Chunk 14
flatPrior_fit <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes, model = "po", dist = "gamma")
# Chunk 15
flatPrior_fit
# Chunk 16
head(flatPrior_fit$samples)
# Chunk 17
# Accessing the first few samples of the first chain
head(flatPrior_fit$mcmcList[[1]])
# Accessing the first few samples of the second chain
head(flatPrior_fit$mcmcList[[2]])
# Chunk 18
head(flatPrior_fit$logPosteriorDensities[[1]])
# Chunk 19
plot(flatPrior_fit, newdata,
main = 'MAP Estimates')
# Chunk 20
plot(flatPrior_fit$mcmcList)
# Chunk 21
logPriorFunction <- function(x){
ans <- 0
ans <- ans + dnorm(x[1], sd = 0.1, log = T)
# Tight prior about 1st parameter, log_shape
ans <- ans + dnorm(x[2], sd = 10, log = T)
# Diffuse prior about 2nd parameter, log_scale
ans <- ans + dnorm(x[3], sd = 0.1, log = T)
# Tight prior about 3rd parameter, regression parameter
return(ans)
}
informPrior_fit <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes, model = "po", dist = "gamma",
logPriorFxn = logPriorFunction)
# Fitting model with prior.
informPrior_fit
# Chunk 22
weak_data <- IR_diabetes[1:2,]
weakData_fit <- ic_bayes(cbind(left, right) ~ gender,
data = weak_data,
model = "po", dist = "gamma",
logPriorFxn = logPriorFunction,
controls = bayesControls(useMLE_start = F))
plot(weakData_fit$mcmcList)
# Chunk 23
diag_baseline(cbind(left, right) ~ gender,
model = "po",
data = IR_diabetes,
dists = c("exponential", "weibull",
"loglogistic", "gamma"),
lgdLocation = "topright")
# Chunk 24
diag_baseline(fit_po, lgdLocation = "topright",
dists = c("exponential", "weibull",
"loglogistic", "gamma")
)
# Chunk 25
diag_covar(fit_po, lgdLocation = "topright",
main = "Checking Proportional Odds")
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
# Chunk 26
diag_covar(fit_po, lgdLocation = "topright",
main = "Checking Proportional Odds")
# Chunk 27
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
data(miceData)
fit = ic_bayes(cbind(l,u) ~ grp, data = miceData)
nrow(fit$samples)
fit$ess
args(ic_bayes)
library(icenReg)
data(miceData)
prFxn = function(vals){
ans = sum(dnorm(vals, sd = 3, log = T))
return(ans)
}
fit = ic_bayes(cbind(l,u) ~ grp, data = miceData, logPriorFxn = prFxn)
fit$ess
library(icenReg)
data(miceData)
prFxn = function(vals){
ans = sum(dnorm(vals, sd = 1, log = T))
return(ans)
}
fit = ic_bayes(cbind(l,u) ~ grp, data = miceData, logPriorFxn = prFxn)
fit$ess
library(icenReg)
data(miceData)
prFxn = function(vals){
ans = sum(dnorm(vals, sd = 4, log = T))
return(ans)
}
fit = ic_bayes(cbind(l,u) ~ grp, data = miceData, logPriorFxn = prFxn)
fit$ess
nrow(fit$mcmcList[[1]])
nrow(fit$mcmcList[[2]])
nrow(fit$mcmcList[[3]])
nrow(fit$mcmcList[[4]])
summary(fit$mcmcList[[1]])
plot(fit$mcmcList)
?seq
seq(from = 0.1, to = .9, by = .1)
invCDF_ests = survCIs(informPrior_fit, newdata,
p = seq(from = 0.05, to = .95, by = 0.1))
invCDF_ests
summary(IR_diabetes)
icenReg:::lines.surv_cis
library(devtools)
document()
setwd("~/Desktop/icenReg_devel/Code/icenReg")
document()
survCIs
?survCIs
install.packages("icenReg")
install.packages("icenReg")
install.packages("icenReg")
install.packages("icenReg")
install.packages("icenReg")
rm(list = ls())
install.packages("icenReg")
install.packages("icenReg")
