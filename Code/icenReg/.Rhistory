names(ans) <- c('mean', 'se')
ans
}
propPrep()
propPrep <- function(n = 10^5, MC = 10){
props <- NA
for(i in 1:MC){
simdata <- simIC_weib(b1 = 0, b2 = 0, n = n, prob_cen = 0.5)
t1 <- system.time(ic_np(simdata[, c('l', 'u')] ))[1]
t2 <- system.time(icenReg:::findMaximalIntersections(simdata$l, simdata$u))[1]
props[i] <- t1/t2
}
ans <- c( mean(props), sd(props)/sqrt(MC) )
names(ans) <- c('mean', 'se')
ans
}
propPrep()
propPrep <- function(n = 10^5, MC = 10){
props <- NA
for(i in 1:MC){
simdata <- simIC_weib(b1 = 0, b2 = 0, n = n, prob_cen = 0.5)
t1 <- system.time(ic_np(simdata[, c('l', 'u')] ))[1]
t2 <- system.time(icenReg:::findMaximalIntersections(simdata$l, simdata$u))[1]
props[i] <- t2/t1
}
ans <- c( mean(props), sd(props)/sqrt(MC) )
names(ans) <- c('mean', 'se')
ans
}
propPrep()
propPrep(n = 10^5, MC = 25)
propPrep(n = 10^6, MC = 25)
propPrep(n = 10^4, MC = 25)
propPrep(n = 10^4, MC = 250)
n <- 10^6
simdata <- simIC_weib(n = n, b1 =0, b2 = 0, prob_cen = 0)
system.time(ic_np(simdata[,c('l', 'u')]))
library(icenReg)
system.time(ic_np(simdata[,c('l', 'u')]))
propPrep(n = 10^4, MC = 250)
propPrep(n = 10^6, MC = 25)
ic_np
propPrep <- function(n = 10^5, MC = 10){
props <- NA
for(i in 1:MC){
simdata <- simIC_weib(b1 = 0, b2 = 0, n = n, prob_cen = 1)
t1 <- system.time(ic_np(simdata[, c('l', 'u')] ))[1]
t2 <- system.time(icenReg:::findMaximalIntersections(simdata$l, simdata$u))[1]
props[i] <- t2/t1
}
ans <- c( mean(props), sd(props)/sqrt(MC) )
names(ans) <- c('mean', 'se')
ans
}
propPrep(n = 10^4, MC = 250)
propPrep(n = 10^6, MC = 25)
propPrep <- function(n = 10^5, MC = 10){
props <- NA
for(i in 1:MC){
simdata <- simIC_weib(b1 = 0, b2 = 0, n = n, prob_cen = 0.5)
t1 <- system.time(ic_np(simdata[, c('l', 'u')] ))[1]
t2 <- system.time(icenReg:::findMaximalIntersections(simdata$l, simdata$u))[1]
props[i] <- t2/t1
}
ans <- c( mean(props), sd(props)/sqrt(MC) )
names(ans) <- c('mean', 'se')
ans
}
propPrep(n = 10^4, MC = 250)
propPrep(n = 10^6, MC = 25)
library(icenReg)
propPrep(n = 10^4, MC = 25)
propPrep(n = 10^4, MC = 250)
propPrep(n = 10^6, MC = 25)
system.time(ic_np(simdata[,c('l', 'u')]))
getSCurves
library(icenReg)
n <- 10^6
times <- rexp(n)
cenTimes <- rexp(n) * 2
isCen <- cenTimes < times
obsT <- times
obsT[isCen] <- cenTimes[isCen]
leftSide <- obsT
rightSide <- obsT
rightSide[isCen] <- Inf
survObj <- Surv(obsT, !isCen)
system.time(survfit(survObj ~ 0) -> survFit)
system.time(ic_np(cbind(leftSide, rightSide)) )
myfit <- ic_np(cbind(leftSide, rightSide))
is(myfit)
rm(list = ls())
gc()
library(icenReg)
simdata <- simIC_weib(b1 = 0, b2 = 0)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
rm(list = ls())
gc()
simdata <- simIC_weib(b1 = 0, b2 = 0)
library(icenReg)
simdata <- simIC_weib(b1 = 0, b2 = 0)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
rm(list = ls())
gc()
library(icenReg)
simdata <- simIC_weib(b1 = 0, b2 = 0)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
library(icenReg)
simdata <- simIC_weib(b1 = 0, b2 = 0)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
test <- getSCurves(fit)
debug(getSCurves)
test <- getSCurves(fit)
ls(fit)
ls(fit)
fit$T_bull_Intervals
library(icenReg)
simdata <- simIC_weib(b1 = 0, b2 = 0)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
sc <- getSCurves(fit)
debug(getSCurves)
sc <- getSCurves(fit)
etas
grpNames
grpNames
library(icenReg)
simdata <- simIC_weib(b1 = 0, b2 = 0)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
library(icenReg)
simdata <- simIC_weib(b1 = 0, b2 = 0)
plot(fit)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
fit
is(fit)
sc <- getSCurves(fit)
sc
fit
fit$p_hat
fit$T_bull_Intervals
simdata
debug(getSCurves)
sc <- getSCurves(fit)
x_l
fit$T_bull_Intervals
library(icenReg)
fit <- ic_np(simdata[, c('l', 'u')])
plot(fit)
fit
library(icenREg)
library(icenReg)
fit
fit
library(icenReg)
fit
fit <- ic_np(simdata[, c('l', 'u')])
fit
is(fit)
library(icenReg)
fit
fit
library(icenReg)
fit
coef(fit)
jnkFit <- ic_sp(cbind(l, u) ~ 0, data = simdata)
library(icenReg)
jnkFit <- ic_sp(cbind(l, u) ~ 0, data = simdata)
jnkFit
coef(jnkFit)
coef(fit)
fit
nrow(coef(jnkFit))
fit$coefficients
jnkFit$coefficients
library(icenReg)
fit
sumPars
nrow(sumPars)
sumPars
nrow(sumPars)
library(icenReg)
fit
plot(fit)
lines(fit, col = 'blue')
lines(fit, color = 'blue')
lines(fit, cols = 'blue')
fit <- ic_par(cbind(l, u) ~ x1 , data = simdata)
lines(fit)
?do.call
addIfMissing <- function(val, name, list){
if(is.null(list[[name]])) list[[name]] <- val
return(list)
}
addListIfMissing(listFrom, listInto){
listFromNames <- names(listFrom)
for(n in listFromNames) listInto <- addIfMissing(listFrom[[n]], n , listInto)
return(listInto)
}
addIfMissing <- function(val, name, list){
if(is.null(list[[name]])) list[[name]] <- val
return(list)
}
addListIfMissing <- function(listFrom, listInto){
listFromNames <- names(listFrom)
for(n in listFromNames) listInto <- addIfMissing(listFrom[[n]], n , listInto)
return(listInto)
}
plot(fit)
plot(fit, xlab = 'Not time')
is(fit)
debug(plot.icenReg_fit)
debug(icenReg:::plot.icenReg_fit)
plot(fit, xlab = 'Not time')
xlab
library(icenReg)
plot(fit)
library(icenReg)
plot(fit)
args(plot)
library(icenReg)
plot(fit)
plot(fit, main = 'Test')
library(icenReg)
simdata <- simIC_weib
simdata <- simIC_weib()
fit1 <- ic_par(cbind(l, u) ~ x1 + x2 ,data = simdata)
plot(fit1)
lines(fit1, col = 'red')
fit2 <- ic_sp(cbind(l,u)~ x1 + x2, data = simdata)
lines(fit2, col = 'red')
library(icenReg)
lines(fit2, col = 'red')
plot(fit1)
lines(fit2, col = 'red')
lines(fit1, col = 'red', lwd = 3)
plot(fit1)
lines(fit2, col = 'red')
lines(fit1, col = 'red', lwd = 3)
library(icenReg)
lines(fit1, col = 'red', lwd = 3)
plot(fit1)
lines(fit2, col = 'red')
lines(fit1, col = 'red', lwd = 3)
lines(fit1, col = 'red', lwd = 30)
library(icenReg)
plot(fit1)
lines(fit1, col = 'red', lwd = 30)
lines(fit2, col = 'green', lwd = 4, lty = 2)
library(MLEcens)
?reduc
library(icenReg)
n <- 10^7
bigData <- simIC_weib(n, b1 = 0, b2 = 0, prob_cen = 0.5)
system.time(icenReg:::findMaximalIntersections(bigData$l, bigData$u))
system.time(ic_np(bigData[,c('l', 'u')]))
View(bigData)
n <- 5 * 10^7
bigData <- simIC_weib(n, b1 = 0, b2 = 0, prob_cen = 0.5)
system.time(icenReg:::findMaximalIntersections(bigData$l, bigData$u))
system.time(bfit <- ic_np(bigData[,c('l', 'u')]))
system.time(bfit <- ic_np(bigData[,c('l', 'u')]))
bfit
is(bfit)
ls(bfit)
bfit$iterations
library(icenReg)
data <- simIC_weib( n = 10^5, b1 = 0, b2 = 0)
fit <- ic_np(data[,c('l', 'u')])
fit
system.time(fit <- ic_np(data[,c('l', 'u')]))
?ic_np
?ic_sp
library(icenREg)
library(icenReg)
?ic_par
data(miceData)
logist_ph_fit <- ic_par(Surv(l, u, type = 'interval2') ~ grp,
data = miceData, dist = 'loglogistic')
logist_po_fit <- ic_par(cbind(l, u) ~ grp,
data = miceData, dist = 'loglogistic',
model = 'po')
?diag_baseline
data(IR_diabetes)
fit <- ic_par(cbind(left, right) ~ gender,
data = IR_diabetes)
diag_baseline(fit, lgdLocation = "topright",
dist = c("exponential", "weibull", "loglogistic"))
debug(diag_baseline)
data(IR_diabetes)
fit <- ic_par(cbind(left, right) ~ gender,
data = IR_diabetes)
diag_baseline(fit, lgdLocation = "topright",
dist = c("exponential", "weibull", "loglogistic"))
plot(fit)
newdata <- data.frame(gender = c('male', 'female'))
plot(fit, newdata)
fit2 <- ic_sp(cbind(left, right) ~ gender, data = IR_diabetes)
plot(fit2)
?ic_np
data(IR_diabetes)
isMale <- IR_diabetes == "male"
maleData <- IR_diabetes[isMale, c('left', 'right')]
femaleData <- IR_diabetes[!isMale, c('left', 'right')]
maleFit <- ic_np(maleData)
femaleFit <- ic_np(maleData)
nrow(maleData)
head(maleData)
isMale
data(IR_diabetes)
isMale <- IR_diabetes$gender == "male"
maleData <- IR_diabetes[isMale, c('left', 'right')]
femaleData <- IR_diabetes[!isMale, c('left', 'right')]
maleFit <- ic_np(maleData)
femaleFit <- ic_np(maleData)
?ic_par
?ic_par
data(miceData)
logist_ph_fit <- ic_par(Surv(l, u, type = 'interval2') ~ grp,
data = miceData, dist = 'loglogistic')
logist_po_fit <- ic_par(cbind(l, u) ~ grp,
data = miceData, dist = 'loglogistic',
model = 'po')
summary(logist_ph_fit)
library(icenReg)
data(miceData)
logist_ph_fit <- ic_par(Surv(l, u, type = 'interval2') ~ grp,
data = miceData, dist = 'loglogistic')
logist_po_fit <- ic_par(cbind(l, u) ~ grp,
data = miceData, dist = 'loglogistic',
model = 'po')
summary(logist_ph_fit)
rm(list = ls())
gc()
data(miceData)
logist_ph_fit <- ic_par(Surv(l, u, type = 'interval2') ~ grp,
data = miceData, dist = 'loglogistic')
logist_po_fit <- ic_par(cbind(l, u) ~ grp,
data = miceData, dist = 'loglogistic',
model = 'po')
summary(logist_ph_fit)
summary(logist_po_fit)
library(icenReg)
data(miceData)
names(miceData)
fit <- ic_np(miceData[,c('l', 'u')])
imputeCens(fit)
ls(fit)
ls(fit, all = TRUE)
ls(fit$.dataEnv)
imputeCens(fit)
library(icenReg)
imputeCens(fit)
fit <- ic_np(miceData[,c('l', 'u')])
imputeCens(fit)
debug(imputeCens)
imputeCens(fit)
getFitEsts(fit)
debug(icenReg:::getSurvTimes)
getFitEsts(fit)
regMod
baseMod
library(icenReg)
getFitEsts(fit)
getFitEsts(fit, p = 0.5)
p = 0.1
getFitEsts(fit, p = 0.1)
getFitEsts(fit, q = 0.1)
library(icenReg)
getFitEsts(fit, p = 0.5)
debug(getFitEsts)
getFitEsts(fit, p = 0.5)
regMod
undebug(getFitEsts)
debug(icenReg:::getSurvTimes)
getFitEsts(fit, p = 0.5)
regMod
library(icenREg)
library(icenReg)
getFitEsts(fit, p = 0.5)
library(icenReg)
getFitEsts(fit, p = 0.5)
debug(icenReg:::getSurvTimes)
undebug(icenReg:::getSurvTimes)
fit <- ic_np(miceData[,c('l', 'u')])
getFitEsts(fit, p = 0.5)
library(icenReg)
getFitEsts(fit, p = 0.5)
getFitEsts(fit, p = 0.6)
getFitEsts(fit, q = 100)
getFitEsts(fit, q = 500)
imputeCens(fit)
debug(imputeCens)
imputeCens(fit)
library(icenReg)
imputeCens(fit)
imputeCens
library(icenReg)
imputeCens(fit)
imputeCens(fit)
?rank
?unique
?Sort
?Sort
?sort
?quantiles
?quantile
ecdf(rnorm(10))
test <- ecdf(c(rnorm(10), NA))
test
raw2Gaussed <- function(vals){
nObs <- sum(!is.na(vals))
rs <- rank(vals, na.last = TRUE,
ties.method = 'average')
ps <- rs / (nObs + 1)
zs <- qnorm(ps)
empCDF <- ecdf(vals)
ans <- list(zVals = zs, pVals = ps, CDF = empCDF)
return(ans)
}
raw2Gaussed(rnorm(10))
test <- raw2Gaussed(rnorm(100, sd = 5))
sd(test$zVals)
args(prcomp)
?prcomp
?prcomp
icenReg:::fit_ICPH()
icenReg:::fit_ICPH
library(icenReg)
sim_data <- simIC_weib(n = 500, b1 = .3, b2 = -.3, model = 'ph',
shape = 2, scale = 2, inspections = 6,
inspectLength = 1)
#simulates data from a cox-ph with beta weibull distribution.
diag_covar(Surv(l, u, type = 'interval2') ~ x1 + x2,
data = sim_data, model = 'po')
ls(y)
y
sim_data <- simIC_weib(n = 500, b1 = .3, b2 = -.3, model = 'ph',
shape = 2, scale = 2, inspections = 6,
inspectLength = 1)
#simulates data from a cox-ph with beta weibull distribution.
diag_covar(Surv(l, u, type = 'interval2') ~ x1 + x2,
data = sim_data, model = 'po')
dim(y)
head(y[,3])
head(y)
q
times <- rexp(10)
cens <- rbinom(10, 1, 0.5)
sObj <- Surv(times, cens)
sObj
dim(sObj)
sim_data <- simIC_weib(n = 500, b1 = .3, b2 = -.3, model = 'ph',
shape = 2, scale = 2, inspections = 6,
inspectLength = 1)
#simulates data from a cox-ph with beta weibull distribution.
diag_covar(Surv(l, u, type = 'interval2') ~ x1 + x2,
data = sim_data, model = 'po')
summary(y[,3])
?ic_sp
?makeCtrls_icsp
qf(0.5, 1, 1)
qf(0.5, 1, 2)
qf(0.5, 2, 2)
qf(0.5, 3, 3)
library(icenReg)
data(miceData)
fit <- ic_bayes(cbind(l, u) ~ grp)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
cnts <- bayesControls(useMLE_start = F)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData, controls = cnts)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData, controls = cnts)
fit <- ic_bayes(cbind(l, u) ~ grp, data = miceData, controls = cnts)
library(coda)
smps <- mcmc(fit$samples)
plot(smps)
summary(fit$samples)
quartz()
plot(smps)
?chol
library(Rcpp)
library(roxygen2)
setwd("~/Desktop/icenReg_devel/Code/icenReg")
compileAttributes()
roxygenize()
cnts <- bayesControls(updateChol = T)
fit1 <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit2 <- ic_bayes(cbind(l, u) ~ grp, data = miceData, controls = cnts)
library(icenReg)
library(coda)
data(miceData)
cnts <- bayesControls(updateChol = T)
fit1 <- ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit2 <- ic_bayes(cbind(l, u) ~ grp, data = miceData, controls = cnts)
mcmc1 <- mcmc(fit1$samples)
mcmc2 <- mcmc(fit2$samples)
summary(mcmc1)
summary(mcmc2)
effectiveSize(mcmc1)
effectiveSize(mcmc2)
plot(mcmc1)
