setwd("~/GitHub/icenReg_devel/Code/icenReg")
library(icenReg)
library(icenReg)
data(miceData)
fit <- ic_par(cbind(l,u) ~ grp, data = miceData)
library(icenReg)
data(miceData)
fit1 <- ic_par(cbind(l,u) ~ grp, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ grp, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ grp, data = miceData)
library(icenReg)
library(icenReg)
data(miceData)
fit1 <- ic_par(cbind(l,u) ~ grp, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ grp, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ grp, data = miceData)
library(icenReg)
library(icenReg)
data(miceData)
fit1 <- ic_par(cbind(l,u) ~ grp, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ grp, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ grp, data = miceData)
library(icenReg)
library(icenReg)
data(miceData)
fit1 <- ic_par(cbind(l,u) ~ grp, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ grp, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ grp, data = miceData)
fit1 <- ic_par(cbind(l,u) ~ 1, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ 1, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ 1, data = miceData)
library(icenReg)
library(icenReg)
data(miceData)
fit1 <- ic_par(cbind(l,u) ~ 1, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ 1, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ 1, data = miceData)
library(icenReg)
library(icenReg)
data(miceData)
fit1 <- ic_par(cbind(l,u) ~ 1, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ 1, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ 1, data = miceData)
fit1 <- ic_par(cbind(l,u) ~ grp, data = miceData)
fit2 <- ic_sp(cbind(l,u) ~ 1, data = miceData)
fit3 <- ic_bayes(cbind(l,u) ~ 1, data = miceData)
new_data = data.frame(grp =c("ce", "ge"))
predict(fit1, new_data)
predict(fit1, newdata = new_data, type = "lp")
# Chunk 1
# For consistency of poor mixing in Bayes example
set.seed(123)
# Chunk 2
library(icenReg)
# Chunk 3
data(miceData)
head(miceData, 3)
# Chunk 4
np_fit = ic_np(cbind(l, u) ~ grp, data = miceData)
# Chunk 5
groupedFit1 <- ic_np(cbind(l,u) ~ 0, data = miceData)
groupedFit2 <- ic_np(miceData[,c('l', 'u')])
# Chunk 6
plot(np_fit, col = c('blue', 'orange'),
xlab = 'Time', ylab = 'Estimated Survival')
# Chunk 7
data("IR_diabetes")
head(IR_diabetes, 3)
# Chunk 8
fit_ph <- ic_sp(cbind(left, right) ~ gender, model = 'ph',
bs_samples = 100, data = IR_diabetes)
fit_po <- ic_sp(cbind(left, right) ~ gender, model = 'po',
bs_samples = 100, data = IR_diabetes)
# Chunk 9
fit_po
fit_ph
# Chunk 10
newdata <- data.frame(gender = c('male', 'female') )
rownames(newdata) <- c('males', 'females')
plot(fit_po, newdata)
# Chunk 11
fit_po_gamma <- ic_par(cbind(left, right) ~ gender,
data = IR_diabetes, model = "po", dist = "gamma")
# Chunk 12
fit_po_gamma
# Chunk 13
plot(fit_po_gamma, newdata, lgdLocation = "topright")
# Chunk 14
flatPrior_fit <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes, model = "po", dist = "gamma")
# Chunk 15
flatPrior_fit
# Chunk 16
head(flatPrior_fit$samples)
# Chunk 17
# Accessing the first few samples of the first chain
head(flatPrior_fit$mcmcList[[1]])
# Accessing the first few samples of the second chain
head(flatPrior_fit$mcmcList[[2]])
# Chunk 18
head(flatPrior_fit$logPosteriorDensities[[1]])
# Chunk 19
plot(flatPrior_fit, newdata,
main = 'Posterior Median Estimates')
# Chunk 20
plot(flatPrior_fit$mcmcList)
# Chunk 21
logPriorFunction <- function(x){
ans <- 0
ans <- ans + dnorm(x[1], sd = 0.1, log = T)
# Tight prior about 1st parameter, log_shape
ans <- ans + dnorm(x[2], sd = 10, log = T)
# Diffuse prior about 2nd parameter, log_scale
ans <- ans + dnorm(x[3], sd = 0.1, log = T)
# Tight prior about 3rd parameter, regression parameter
return(ans)
}
informPrior_fit <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes, model = "po", dist = "gamma",
logPriorFxn = logPriorFunction)
# Fitting model with prior.
informPrior_fit
# Chunk 22
weak_data <- IR_diabetes[1:2,]
weakData_fit <- ic_bayes(cbind(left, right) ~ gender,
data = weak_data,
model = "po", dist = "gamma",
logPriorFxn = logPriorFunction,
controls = bayesControls(useMLE_start = F))
plot(weakData_fit$mcmcList)
# Chunk 23
# Extract estimates for inverse CDF
invCDF_ests = survCIs(informPrior_fit, newdata,
p = seq(from = 0.05, to = .95, by = 0.2))
# Extract estimates for *CDF* probabilities at given values
CDF_ests = survCIs(informPrior_fit, newdata,
q = seq(from = 5, to = 25, by = 5))
invCDF_ests
CDF_ests
# Chunk 24
diag_baseline(cbind(left, right) ~ gender,
model = "po",
data = IR_diabetes,
dists = c("exponential", "weibull",
"loglogistic", "gamma"),
lgdLocation = "topright")
# Chunk 25
diag_baseline(fit_po, lgdLocation = "topright",
dists = c("exponential", "weibull",
"loglogistic", "gamma")
)
# Chunk 26
diag_covar(fit_po, lgdLocation = "topright",
main = "Checking Proportional Odds")
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
# Chunk 27
diag_covar(fit_po, lgdLocation = "topright",
main = "Checking Proportional Odds")
# Chunk 28
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
traceback()
debug(ic_sp)
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
formula
fit4 <- ic_sp(cbind(l,u) ~ 0, data = miceData)
undebug(ic_sp)
fit4 <- ic_sp(cbind(l,u) ~ 0, data = miceData)
debug(ic_sp)
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
call_base
newcall
formula
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
call_info
head(data)
debug(make_xy)
formula
head(data)
mod_frame
str(mod_frame )
fit4 <- ic_sp(cbind(l,u) ~ 0, data = miceData)
fit5 <- ic_sp(cbind(left, right) ~ 0, data = IR_diabetes)
diag_covar(fit_ph, lgdLocation = "topright",
main = "Checking Proportional Hazards")
is(data)
formula
rm(list = ls())
library(icenReg)
fit6 = ic_par(cbind(left, right) ~ gender, data = IR_diabetes)
diag_covar(fit6)
data("IR_diabetes")
fit6 = ic_par(cbind(left, right) ~ gender, data = IR_diabetes)
diag_covar(fit6)
debug(icenReg:::make_xy)
diag_covar(fit6)
frml
str(mod_frame)
jnk <- ic_sp(cbind(left, right) ~ 0, data = IR_diabetes )
str(mod_frame)
dim(x)
frml
frml[[1]]
frml[[2]]
frml[[3]]
frml[[3]] == "0"
?try
try(jnk <- log("a"))
try(jnk <- log("a"), verbost = T)
?tryNew
?try
library(icenReg)
fit6 = ic_par(cbind(left, right) ~ gender, data = IR_diabetes)
debug(icenReg:::make_xy)
diag_covar(fit6)
?try
library(icenReg)
fit6 = ic_par(cbind(left, right) ~ gender, data = IR_diabetes)
debug(icenReg:::make_xy)
diag_covar(fit6)
library(icenReg)
library(icenReg)
fit6 = ic_par(cbind(left, right) ~ gender, data = IR_diabetes)
debug(icenReg:::make_xy)
diag_covar(fit6)
undebug(icenReg:::make_xy)
diag_covar(fit6)
