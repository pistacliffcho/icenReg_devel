rowNames <- rownames(newdata)
if(is.null(rowNames)){
if(nrow(newdata) > 0){
rownames(newdata) <- 1:nrow(newdata)
rowNames <- rownames(newdata)
}
}
for(i in seq_along(rowNames)){
this_name <- rowNames[i]
ci_list[[this_name]] <- fit_one_row(fit, p = p,
p_ends = c(p_low, p_hi),
MC_samps = MC_samps)
}
cis <<- ci_list
},
show = function(){
cat("Model call:\n", call, '\n')
for(i in seq_along(ci_list)){
this_name <- names(ci_list)[i]
cat("Rowname: ", this_name, "\n")
print(ci_list[[i]])
}
}
))
surv_cis <- setRefClass("surv_cis",
fields = c('cis', 'call', 'newdata'),
methods = list(
fit_one_row = function(fit, newdata_row,
p, p_ends, MC_samps){
samp <- sampSurv(fit, newdata_row,
p = p, samples = MC_samps)
ans <- matrix(nrow = length(p), ncol = 2)
for(i in 1:length(p)){ ans[i,] <- quantile(samp[,i], probs = p_ends)}
colnames(ans) <- c("lower", "upper")
rownames(ans) <- round(p, 3)
return(ans)
},
initialize = function(fit,
newdata = NULL,
p = c(0:9 * .1 + 0.05),
ci_level = 0.95,
MC_samps = 40000){
call <<- fit$call
if(ci_level < 0 | ci_level > 1) stop('invalid ci_level')
alpha <- (1 - ci_level)/2
p_low = alpha
p_hi  = 1 - alpha
ci_list <- list()
rowNames <- rownames(newdata)
if(is.null(rowNames)){
if(nrow(newdata) > 0){
rownames(newdata) <<- 1:nrow(newdata)
rowNames <- rownames(newdata)
}
}
for(i in seq_along(rowNames)){
this_name <- rowNames[i]
ci_list[[this_name]] <- fit_one_row(fit, p = p,
p_ends = c(p_low, p_hi),
MC_samps = MC_samps)
}
cis <<- ci_list
},
show = function(){
cat("Model call:\n", call, '\n')
for(i in seq_along(ci_list)){
this_name <- names(ci_list)[i]
cat("Rowname: ", this_name, "\n")
print(ci_list[[i]])
}
}
))
library(icenReg)
head(IR_diabetes)
newdata <- data.frame(gender = c('male', 'female'))
args(icenReg:::survCIs)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
traceback()
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
newdata_row
nrow(newdata_row)
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
test_cis
print(y ~ x)
cat(y ~ x)
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
test_cis
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
test_cis
rownames(newdata) <- c("Males", "Females")
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
test_cis
surv_cis <- setRefClass("surv_cis",
fields = c('cis', 'call', 'newdata'),
methods = list(
fit_one_row = function(fit, newdata_row,
p, p_ends, MC_samps){
samp <- sampleSurv(fit, newdata_row,
p = p, samples = MC_samps)
ans <- matrix(nrow = length(p), ncol = 2)
for(i in 1:length(p)){ ans[i,] <- quantile(samp[,i], probs = p_ends)}
ans <- cbind(p, ans)
colnames(ans) <- c("Percentile", "lower", "upper")
rownames(ans) <- round(p, 3)
return(ans)
},
initialize = function(fit,
newdata = NULL,
p = c(0:9 * .1 + 0.05),
ci_level = 0.95,
MC_samps = 40000){
call <<- fit$call
if(ci_level < 0 | ci_level > 1) stop('invalid ci_level')
alpha <- (1 - ci_level)/2
p_low = alpha
p_hi  = 1 - alpha
ci_list <- list()
rowNames <- rownames(newdata)
if(is.null(rowNames)){
if(nrow(newdata) > 0){
rownames(newdata) <<- 1:nrow(newdata)
rowNames <- rownames(newdata)
}
}
for(i in seq_along(rowNames)){
this_name <- rowNames[i]
ci_list[[this_name]] <- fit_one_row(fit, newdata_row = get_dataframe_row(newdata, i),
p = p, p_ends = c(p_low, p_hi),
MC_samps = MC_samps)
}
cis <<- ci_list
},
show = function(){
cat("Model call:\n  ")
print(call,)
for(i in seq_along(cis)){
this_name <- names(cis)[i]
cat("Rowname: ", this_name, "\n")
print(cis[[i]])
}
},
one_lines <- function(index = 1, this_col, ...){
argList <- list(...)
argList$col = this_col
argList$lty = 2
these_cis <- cis[[index]]
argList$x = these_cis[,2]
argList$y = these_cis[,1]
do.call(lines, argList)
argList$x = these_cis[,3]
do.call(lines, argList)
}
))
surv_cis <- setRefClass("surv_cis",
fields = c('cis', 'call', 'newdata'),
methods = list(
fit_one_row = function(fit, newdata_row,
p, p_ends, MC_samps){
samp <- sampleSurv(fit, newdata_row,
p = p, samples = MC_samps)
ans <- matrix(nrow = length(p), ncol = 2)
for(i in 1:length(p)){ ans[i,] <- quantile(samp[,i], probs = p_ends)}
ans <- cbind(p, ans)
colnames(ans) <- c("Percentile", "lower", "upper")
rownames(ans) <- round(p, 3)
return(ans)
},
initialize = function(fit,
newdata = NULL,
p = c(0:9 * .1 + 0.05),
ci_level = 0.95,
MC_samps = 40000){
call <<- fit$call
if(ci_level < 0 | ci_level > 1) stop('invalid ci_level')
alpha <- (1 - ci_level)/2
p_low = alpha
p_hi  = 1 - alpha
ci_list <- list()
rowNames <- rownames(newdata)
if(is.null(rowNames)){
if(nrow(newdata) > 0){
rownames(newdata) <<- 1:nrow(newdata)
rowNames <- rownames(newdata)
}
}
for(i in seq_along(rowNames)){
this_name <- rowNames[i]
ci_list[[this_name]] <- fit_one_row(fit, newdata_row = get_dataframe_row(newdata, i),
p = p, p_ends = c(p_low, p_hi),
MC_samps = MC_samps)
}
cis <<- ci_list
},
show = function(){
cat("Model call:\n  ")
print(call,)
for(i in seq_along(cis)){
this_name <- names(cis)[i]
cat("Rowname: ", this_name, "\n")
print(cis[[i]])
}
},
one_lines = function(index = 1, this_col, ...){
argList <- list(...)
argList$col = this_col
argList$lty = 2
these_cis <- cis[[index]]
argList$x = these_cis[,2]
argList$y = these_cis[,1]
do.call(lines, argList)
argList$x = these_cis[,3]
do.call(lines, argList)
}
))
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata = newdata)
plot(diab_aft_bayes, newdata)
warnings()
plot(diab_aft_bayes, newdata)
plot(diab_aft_bayes, newdata)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
test_cis$one_lines()
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
test_cis$one_lines()
test_cis$one_lines(index = 1, this_col = 'black')
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
test_cis$one_lines()
test_cis$one_lines(index = 1, this_col = "black")
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
test_cis$one_lines(index = 1, this_col = "black")
test_cis$one_lines(index = 2, this_col = "red")
diab_aft_bayes
diab_aft_bayes <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes, model = 'aft')
diab_aft_bayes
summary(diab_aft_bayes$samples)
data(miceData)
mice_par_marg <- ic_par(cbind(l, u) ~ 0, data = miceData)
mice_bayes_ph <- ic_bayes(cbind(l, u) ~ grp, data = miceData,
controls = bayesControls(samples = 500))
mice_bayes_ph
mice_bayes_aft
traceback()
sum_obj <- summary(mice_bayes_aft)
ls(sum_obj)
debug(sum_obj$show)
sum_obj
sum_obj
undebug(sum_obj$show)
sum_obj
summary(mice_bayes_aft)
mice_bayes_aft
rm(list = ls())
mice_par_marg <- ic_par(cbind(l, u) ~ 0, data = miceData)
mice_bayes_ph <- ic_bayes(cbind(l, u) ~ grp, data = miceData,
controls = bayesControls(samples = 500))
mice_par_ph   <- ic_par(cbind(l, u) ~ grp, data = miceData)
mice_bayes_po <- ic_bayes(cbind(l, u) ~ grp, data = miceData,
controls = bayesControls(samples = 500),
model = 'po')
mice_par_po   <- ic_par(cbind(l, u) ~ grp, data = miceData,
mocel = 'po')
data(miceData)
mice_par_marg <- ic_par(cbind(l, u) ~ 0, data = miceData)
mice_bayes_ph <- ic_bayes(cbind(l, u) ~ grp, data = miceData,
controls = bayesControls(samples = 500))
mice_par_marg
mice_bayes_ph
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
data("IR_diabetes")
diab_aft_bayes <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes, model = 'aft')
newdata <- data.frame(gender = c('male', 'female'))
rownames(newdata) <- c("Males", "Females")
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
test_cis$lines()
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
test_cis$lines()
debug(test_cis$lines
)
test_cis$lines()
cols
nCIs
nCols ! = nCIs
nCols != nCIs
nCols
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
test_cis$lines()
traceback()
library(icenReg)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
test_cis$all_lines()
test_cis
mice_par_marg
is(mice_par_marg)
list.files()
library(devtools)
document()
document()
library(icenReg)
plot(diab_aft_bayes, newdata)
lines(test_cis)
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
lines(test_cis)
diab_aft_bayes <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes, model = 'aft')
newdata <- data.frame(gender = c('male', 'female'))
rownames(newdata) <- c("Males", "Females")
test_cis <- icenReg:::survCIs(diab_aft_bayes,
newdata = newdata)
plot(diab_aft_bayes, newdata)
lines(test_cis)
library(icenReg)
plot(diab_aft_bayes, newdata)
lines(test_cis)
library(icenReg)
plot(diab_aft_bayes, newdata)
lines(test_cis)
plot(diab_aft_bayes, newdata)
library(icenReg)
plot(diab_aft_bayes, newdata)
lines(test_cis)
plot(diab_aft_bayes, newdata)
library(icenReg)
plot(diab_aft_bayes, newdata)
lines(test_cis)
library(icenReg)
plot(diab_aft_bayes, newdata, cis = F)
lines(test_cis)
warnings()
warnings()
lines(test_cis)
?plot
library(icenReg)
plot(diab_aft_bayes, newdata, cis = F)
lines(test_cis)
library(icenReg)
plot(diab_aft_bayes, newdata, cis = F)
library(icenReg)
plot(diab_aft_bayes, newdata, cis = F)
library(icenReg)
plot(diab_aft_bayes, newdata, cis = F)
debug(icenReg:::plot.icenReg_fit)
plot(diab_aft_bayes, newdata, cis = F)
firstPlotList
cis
undebug(icenReg:::plot.icenReg_fit)
debug(icenReg:::lines.icenReg_fit)
plot(diab_aft_bayes, newdata, cis = F)
cis
argList
library(icenReg)
plot(diab_aft_bayes, newdata, cis = F)
library(icenReg)
plot(diab_aft_bayes, newdata, cis = F)
plot(diab_aft_bayes, newdata, cis = T)
library(icenReg)
data("IR_diabetes")
plot(diab_aft_bayes, newdata, cis = F)
plot(diab_aft_bayes, newdata, cis = T)
test_cis <- survCIs(diab_aft_bayes, newdata = newdata)
test_cis
library(devtools)
document()
document()
document()
document()
document()
?survCIs
data("IR_diabetes")
fit <- ic_bayes(cbind(left, right) ~ gender, data = IR_diabetes)
# Getting credible intervals for survival curves
# for males and females
newdata <- data.frame(gender = c("male", "female"))
rownames(newdata) <- c("Males", "Females")
diab_cis <- survCIs(fit, newdata)
diab_cis
# Can add this to any plot
plot(fit, cis = FALSE)
# Would have been included by default
lines(diab_cis, cols = c("black", "red"))
library(icenReg)
?survCIs
data("IR_diabetes")
fit <- ic_bayes(cbind(left, right) ~ gender, data = IR_diabetes)
# Getting credible intervals for survival curves
# for males and females
newdata <- data.frame(gender = c("male", "female"))
rownames(newdata) <- c("Males", "Females")
diab_cis <- survCIs(fit, newdata)
diab_cis
# Can add this to any plot
plot(fit, cis = FALSE)
# Would have been included by default
lines(diab_cis, cols = c("black", "red"))
library(icenReg)
data("IR_diabetes")
fit <- ic_bayes(cbind(left, right) ~ gender, data = IR_diabetes)
# Getting credible intervals for survival curves
# for males and females
newdata <- data.frame(gender = c("male", "female"))
rownames(newdata) <- c("Males", "Females")
diab_cis <- survCIs(fit, newdata)
diab_cis
# Can add this to any plot
plot(fit, cis = FALSE)
# Would have been included by default
lines(diab_cis, cols = c("black", "red"))
library(icenReg)
?survCIs
library(devtools)
document()
library(icenReg)
?survCIs
data("IR_diabetes")
fit <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes)
# Getting credible intervals for survival curves
# for males and females
newdata <- data.frame(gender = c("male", "female"))
rownames(newdata) <- c("Males", "Females")
diab_cis <- survCIs(fit, newdata)
diab_cis
# Can add this to any plot
plot(fit, newdata = newdata,
cis = FALSE)
# Would have been included by default
lines(diab_cis, cols = c("black", "red"))
library(icenReg)
data("IR_diabetes")
fit <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes)
# Getting credible intervals for survival curves
# for males and females
newdata <- data.frame(gender = c("male", "female"))
rownames(newdata) <- c("Males", "Females")
diab_cis <- survCIs(fit, newdata)
diab_cis
# Can add this to any plot
plot(fit, newdata = newdata,
cis = FALSE)
# Would have been included by default
lines(diab_cis, cols = c("black", "red"))
library(icenReg)
data("IR_diabetes")
fit <- ic_bayes(cbind(left, right) ~ gender,
data = IR_diabetes)
# Getting credible intervals for survival curves
# for males and females
newdata <- data.frame(gender = c("male", "female"))
rownames(newdata) <- c("Males", "Females")
diab_cis <- survCIs(fit, newdata)
diab_cis
# Can add this to any plot
plot(fit, newdata = newdata,
cis = FALSE)
# Would have been included by default
lines(diab_cis, cols = c("black", "red"))
data(miceData)
newdata <- data.frame(grp = c("ce", 'ge'))
fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData, model = 'aft')
plot(fit, newdata)
plot(fit, newdata, xlim = c(0, 3000))
fit <- ic_bayes(cbind(l,u) ~ grp, data = miceData, model = 'po')
plot(fit, newdata, xlim = c(0, 3000))
fit <- ic_np(cbind(l,u) ~ grp, data = miceData)
getFitEsts(fit)
plot(fit)
library(devtools)
document()
document()
