library(icenReg)
myFit4 <- ic_par(cbind(l,u) ~ numServers + busy, data = icData, model = 'ph')
library(icenReg)
myFit4 <- ic_par(cbind(l,u) ~ numServers + busy, data = icData, model = 'ph')
sreg_fit <- survreg(Surv(l,u, type = 'interval2') ~ numServers + busy,
data = icData)
myFit4
summary(sreg_fit)
myFit4$llk - sreg_fit$loglik[1]
myFit4$llk - sreg_fit$loglik[2]
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.8) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rexp(n) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata <- data.frame(time = c(0, 0, 0),
left = c(0, 0, 0),
numServers = c(1, 1, 2),
busy = c(F, T, T))
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
rowMeans(pat_imputations < service_imputations)
pat_imputations <- imputeCens(patience_fit, newdata, numImputes = 1000)
service_imputations <- imputeCens(service_fit, newdata, numImputes = 1000)
rowMeans(pat_imputations < service_imputations)
service_fit
pat_imputations[,1:5]
service_imputations[,1:5]
newdata_patience <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
newdata_service <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
library(icenReg)
rm(list = ls())
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.8) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rexp(n) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata_patience <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
newdata_service <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_imputations < service_imputations)
?ir_sample
setwd("~/Desktop/icenReg_devel/Code/icenReg")
library(roxygen2)
library(devtools)
document()
args(ir_sample)
newdata <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rm(list = ls())
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.8) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rexp(n) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_imputations < service_imputations)
library(icenReg)
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.8) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rexp(n) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_imputations < service_imputations)
rowMeans(pat_samples < service_samples)
library(icenReg)
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.6) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rexp(n) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_samples < service_samples)
library(icenReg)
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.6) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rexp(n) * service_adj * 0.5
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata <- data.frame(numServers = c(1, 1, 2),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_samples < service_samples)
patience_fit
service_fit
newdata <- data.frame(numServers = c(1, 1, 4),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_samples < service_samples)
mean(rweibull(shape = 5, scale = 1))
mean(rweibull(1000, shape = 5, scale = 1))
hist(rweibull(1000, shape = 5, scale = 1))
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.6) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rweibull(n, shape = 5, scale = 1) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata <- data.frame(numServers = c(1, 1, 4),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_samples < service_samples)
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_samples < service_samples)
plot(density(pat_samples[1,]))
plot(density(pat_samples[1,]) xlim = c(-1, 5))
plot(density(pat_samples[1,]), xlim = c(-1, 5))
lines(density(pat_samples[2,]), col = 'red')
lines(density(pat_samples[3,]), col = 'blue')
newdata
newdata <- data.frame(numServers = c(1, 1, 100),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
lines(density(pat_samples[3,]), col = 'blue')
patience+fit
patience_fit
newdata <- data.frame(numServers = c(1, 1, 100),
busy = c(F, T, T))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
summary(t(service_samples))
newdata
pat_samples <- ir_sample(patience_fit, newdata[1,], samples = 1000)
pat_samples2 <- ir_sample(patience_fit, newdata[2,], samples = 1000)
summary(pat_samples)
summary(t(pat_samples))
summary(t(pat_samples1))
pat_samples1 <- ir_sample(patience_fit, newdata[1,], samples = 1000)
pat_samples2 <- ir_sample(patience_fit, newdata[2,], samples = 1000)
summary(t(pat_samples1))
summary(t(pat_samples2))
newdata <- data.frame(numServers = c(1, 1, 100),
busy = c(0, 1, 1))
pat_samples1 <- ir_sample(patience_fit, newdata[1,], samples = 1000)
pat_samples2 <- ir_sample(patience_fit, newdata[2,], samples = 1000)
summary(t(pat_samples1))
summary(t(pat_samples2))
newdata <- data.frame(numServers = c(1, 1, 100),
busy = c(0, 1, 1),
left = c(0, 0, 0),
time = c(0, 0, 0))
test <- imputeCens(patience_fit, newdata, samples = 100)
test <- imputeCens(patience_fit, newdata, numImputes  = 100)
rowMeans(test)
test <- imputeCens(patience_fit, newdata, numImputes  = 100)
rowMeans(test)
test <- imputeCens(patience_fit, newdata, numImputes  = 100)
rowMeans(test)
test <- imputeCens(patience_fit, newdata, numImputes  = 100)
rowMeans(test)
test <- imputeCens(patience_fit, newdata, numImputes  = 100)
rowMeans(test)
test <- imputeCens(patience_fit, newdata, numImputes  = 1000)
rowMeans(test)
test <- imputeCens(patience_fit, newdata, numImputes  = 1000)
rowMeans(test)
test <- imputeCens(patience_fit, newdata, numImputes  = 1000)
rowMeans(test)
getFitEsts
getFitEsts(patience_fit, newdata, p = c(0.5,0.5, 0.5))
getFitEsts(patience_fit, newdata, p = c(0.5,0.5, 0.5))
getFitEsts(patience_fit, newdata, p = c(0.5,0.5, 0.75))
sample_in_interval <- function(fit, newdata, lower_time, upper_time){
p_l <- getFitEsts(fit, newdata, q = lower_time)
p_u <- getFitEsts(fit, newdata, q = upper_time)
raw_p <- runif(length(p_l), min = p_l, max = p_l)
ans <- getFitEsts(fit, newdata, p = raw_p)
return(ans)
}
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval <- function(fit, newdata, lower_time, upper_time){
p_l <- getFitEsts(fit, newdata, q = lower_time)
p_u <- getFitEsts(fit, newdata, q = upper_time)
raw_p <- runif(length(p_l), min = p_l, max = p_u)
ans <- getFitEsts(fit, newdata, p = raw_p)
return(ans)
}
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
sample_in_interval(patience_fit, newdata, 0, Inf)
test <- sample_in_interval(patience_fit, newdata, 0, Inf)
test
test <- sample_in_interval(patience_fit, newdata, 0, Inf)
for(i in 1:100){
test <- rbind(test, sample_in_interval(patience_fit, newdata, 0, Inf))
}
test
colMeans(test)
colMeans(test)
test <- sample_in_interval(patience_fit, newdata, 0, Inf)
for(i in 1:100){
test <- rbind(test, sample_in_interval(patience_fit, newdata, 0, Inf))
}
colMeans(test)
test <- sample_in_interval(patience_fit, newdata, 0, Inf)
for(i in 1:100){
test <- rbind(test, sample_in_interval(patience_fit, newdata, 0, Inf))
}
colMeans(test)
patience_fit
newdata
debug(sample_in_interval)
test <- sample_in_interval(patience_fit, newdata, 0, Inf)
patience_fit
p_l
p_u
getFitEsts
library(icenReg)
library(icenReg)
test <- sample_in_interval(patience_fit, newdata, 0, Inf)
test <- sample_in_interval(patience_fit, newdata, 0, Inf)
for(i in 1:100){
test <- rbind(test, sample_in_interval(patience_fit, newdata, 0, Inf))
}
colMeans(test)
pat_samples1 <- ir_sample(patience_fit, newdata[1,], samples = 1000)
pat_samples2 <- ir_sample(patience_fit, newdata[2,], samples = 1000)
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_samples < service_samples)
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.6) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj * 2
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rweibull(n, shape = 5, scale = 1) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
library(icenReg)
simWaits <- function(n = 100,
busyEffectOnService =  log(3),
busyEffectOnPatience = log(1.5),
numServersEffectOnService = log(0.6) ){
isBusy <- rbinom(n, size = 1, prob = 0.5)
numServers <- rpois(n, lambda = 1) + 1
patience_time_adj <- exp(isBusy * busyEffectOnPatience)
patience_time <- rexp(n) * patience_time_adj * 2
service_adj <- exp(isBusy * busyEffectOnService +
numServers * numServersEffectOnService)
service_time <- rweibull(n, shape = 5, scale = 1) * service_adj
res <- data.frame(time = service_time,
left = service_time > patience_time,
numServers = numServers,
busy = isBusy)
return(res)
}
exampleData <- simWaits(n = 4000)
patience_fit <- ic_par(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
service_fit <- ic_par(cbind(time,time) ~ numServers + busy,
data = exampleData,
model = 'aft')
newdata <- data.frame(numServers = c(1, 1, 10),
busy = c(0, 1, 1),
left = c(0, 0, 0),
time = c(0, 0, 0))
pat_samples <- ir_sample(patience_fit, newdata, samples = 1000)
service_samples <- ir_sample(service_fit, newdata, samples = 1000)
rowMeans(pat_samples < service_samples)
summary(exampleData)
serv0_notBusy = exampleData$numServers == 0 & exampleData$busy == 0
serv0_notBusy = exampleData$numServers == 1 & exampleData$busy == 0
mean(!exampleData$left[serv1_notBusy])
serv1_notBusy = exampleData$numServers == 1 & exampleData$busy == 0
mean(!exampleData$left[serv1_notBusy])
rowMeans(pat_samples < service_samples)
serv1_notBusy = exampleData$numServers == 1 & exampleData$busy == 1
mean(!exampleData$left[serv1_notBusy])
?ir_sample
test <- ir_sample(patience_fit)
test
list.files()
library(devtools)
document()
library(icenReg)
?ir_sample
library(icenReg)
?ir_sample
library(devtools)
document()
library(devtools)
document()
library(icenReg)
?ir_sample
simdata <- simIC_weib(n = 500)
fit <- ic_par(cbind(l, u) ~ x1 + x2,
data = simdata)
newdata = data.frame(x1 = c(0, 1), x2 = c(1,1))
sampleResponses <- ir_sample(fit, newdata = newdata, samples = 100)
sampleResponses[,1:5]
rownames(newdata)
library(icenReg)
simdata <- simIC_weib(n = 500)
fit <- ic_par(cbind(l, u) ~ x1 + x2,
data = simdata)
newdata = data.frame(x1 = c(0, 1), x2 = c(1,1))
sampleResponses <- ir_sample(fit, newdata = newdata, samples = 100)
sampleResponses[,1:5]
?ir_sample
?imputeCens
library(devtools)
document()
document()
library(icenReg)
?simDC_weib
simData <- simDC_weib()
fit <- ic_par(cbind(l, u) ~ x1 + x2, data = simData)
fit
list.files()
library(roxygen2)
library(devtools)
document()
document()
?ic_sample
sampleType = 'fixedParSample')
source('~/.active-rstudio-document', echo=TRUE)
ls(patience_fit)
source('~/.active-rstudio-document', echo=TRUE)
library(devtools)
document()
source('~/.active-rstudio-document', echo=TRUE)
patience_fit
coef(patience_fit)
coefficients(patience_fit)
ls(coefficients)
ls(patience_fit)
patience_fit$coefficients
patience_fit <- ic_bayes(cs2ic(time, left) ~ numServers + busy,
data = exampleData,
model = 'aft')
patience_fit$coefficients
debug(ic_sample)
patience_samples <- ic_sample(patience_fit, newdata, samples = 1000,
sampleType = 'fixedParSample' )
orgCoefs
getSamplablePars
is(fit)
source('~/.active-rstudio-document', echo=TRUE)
coef(patience_fit)
install.packages('tools')
install.packages("tools")
install.packages("tools")
install.packages("tools")
