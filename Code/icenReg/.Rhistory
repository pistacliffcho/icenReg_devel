library(lubridate)
sales_date = mdy(sales_df$Date)
sales_month = paste(year(sales_date), month(sales_date), sep = "_")
sales_quarter = paste(year(sales_date), quarter(sales_date), sep = "_")
qt_sales = NULL
qt_time = NULL
unq_qt = unique(sales_quarter)
for(i in seq_along(unq_qt)){
d = unq_qt[i]
is_this_date = sales_quarter == d
this_sales = sum( sales_df$Quantity[is_this_date] )
qt_sales[i] = this_sales
qt_time[i] = d
}
plot(yq(unq_qt), qt_sales,
main = "Quarterly Sales")
library(lubridate)
sales_date = mdy(sales_df$Date)
sales_month = paste(year(sales_date), month(sales_date), sep = "_")
sales_quarter = paste(year(sales_date), quarter(sales_date), sep = "_")
qt_sales = NULL
qt_time = NULL
unq_qt = unique(sales_quarter)
for(i in seq_along(unq_qt)){
d = unq_qt[i]
is_this_date = sales_quarter == d
this_sales = sum( sales_df$Quantity[is_this_date] )
qt_sales[i] = this_sales
qt_time[i] = d
}
plot(yq(unq_qt), qt_sales,
main = "Quarterly Sales",
ylab = "Sales (units)",
xlab = "Quarter")
head(complaints_df)
comp_qt = yq(complaints_df$Quarter)
ncol(complaints_df)
all_comps = colnames(complaints_df)[12:20]
all_comps
?data.frame
all_comps = colnames(complaints_df)[12:20]
make_all_comps = function(all_comps, data, qts){
unq_qts = unique(qts)
comp_counts = matrix(nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = all_comps
colnames(comp_counts = unq_qts)
for(c in all_comps){
this_counts = qt_comps(c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
return(this_counts)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
make_all_comps = function(all_comps, data, qts){
unq_qts = unique(qts)
comp_counts = matrix(nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = all_comps
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
return(this_counts)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
comp_qt = yq(complaints_df$Quarter)
qt_comps = function(type = "Documentation", qts, data){
comp_type = data[[type]]
subset = comp_type == 1
comp_date = qts[subset]
tot_comps = table(comp_date)
return(tot_comps)
}
all_comps = colnames(complaints_df)[12:20]
make_all_comps = function(all_comps, data, qts){
unq_qts = unique(qts)
comp_counts = matrix(nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = all_comps
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
return(this_counts)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
debug(make_all_comps)
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
colnames(comp_counts)
unq_qts
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = all_comps
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
return(this_counts)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
comp_counts
all_comps
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = all_comps
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
return(comp_counts)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
ccomp_counts
comp_counts
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = all_comps
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
return(comp_counts)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = all_comps
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
return(as.data.frame(comp_counts))
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
args(gemo_point)
library(ggplot2)
args(geom_point)
?geom_point
library(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(ggplot2)
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps) + 1, ncol = length(unq_qts))
rownames(comp_counts) = c(all_comps, "date")
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
comp_counts["date",] = unq_qts
return(as.data.frame(comp_counts))
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
comp_counts
library(plotly)
p = plot_ly(comp_counts)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(plotly)
p = plot_ly(comp_counts)
p = plot_ly(comp_counts)
for(i in 1:nrow(comp_counts)){
p = p + add_trace(x =~data, y = comp_counts[i,],
name = rownames(comp_counts)[i])
}
p = plot_ly(comp_counts)
for(i in 1:nrow(comp_counts)){
p = add_trace(p, x =~data, y = comp_counts[i,],
name = rownames(comp_counts)[i])
}
p
p = plot_ly(comp_counts, type = "scatter")
p = plot_ly(comp_counts, type = "scatter", mode = "lines")
for(i in 1:nrow(comp_counts)){
p = add_trace(p, x =~data, y = comp_counts[i,],
name = rownames(comp_counts)[i])
}
p
p = plot_ly(comp_counts, type = "scatter", mode = "lines")
for(i in 1:nrow(comp_counts)){
p = add_trace(p, x =~date, y = comp_counts[i,])
}
p
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps) + 1, ncol = length(unq_qts))
rownames(comp_counts) = c(all_comps, "date")
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
ans = list(cnts = comp_counts,
dates = unq_qts)
return(ans)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
comp_counts
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = c(all_comps)
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
ans = list(cnts = comp_counts,
dates = unq_qts)
return(ans)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
ccomp_counts
comp_counts
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
plot(NA,
ylim = c(0, max_comp),
xlim = range(comp_list$date))
}
draw_counts(comp_counts)
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
plot(x = comp_list$date, y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
}
draw_counts(comp_counts)
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
plot(x = yq(comp_list$date),
y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
}
draw_counts(comp_counts)
qy
library(lubridate)
qy
yq
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
plot(x = yq(comp_list$date),
y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
}
draw_counts(comp_counts)
yq(comp_list$date)
yq(comp_counts$dates)
comp_list$date
comp_counts$date
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
plot(x = ymd(comp_list$date),
y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
}
draw_counts(comp_counts)
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
dates = ymd(comp_list$date)
plot(x = dates,
y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
for(i in 1:nrow(comp_list$cnts)){
this_row = comp_list$cnts[i,]
lines(dates, this_row, col = i + 1)
}
}
draw_counts(comp_counts)
sales_df = read.csv("sales.csv")
complaints_df = read.csv("complaints.csv")
summary(sales_df)
summary(complaints_df)
library(lubridate)
sales_date = mdy(sales_df$Date)
sales_month = paste(year(sales_date), month(sales_date), sep = "_")
sales_quarter = paste(year(sales_date), quarter(sales_date), sep = "_")
qt_sales = NULL
qt_time = NULL
unq_qt = unique(sales_quarter)
for(i in seq_along(unq_qt)){
d = unq_qt[i]
is_this_date = sales_quarter == d
this_sales = sum( sales_df$Quantity[is_this_date] )
qt_sales[i] = this_sales
qt_time[i] = d
}
plot(yq(unq_qt), qt_sales,
main = "Quarterly Sales",
ylab = "Sales (units)",
xlab = "Quarter")
comp_qt = yq(complaints_df$Quarter)
qt_comps = function(type = "Documentation", qts, data){
comp_type = data[[type]]
subset = comp_type == 1
comp_date = qts[subset]
tot_comps = table(comp_date)
return(tot_comps)
}
all_comps = colnames(complaints_df)[12:20]
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = c(all_comps)
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
ans = list(cnts = comp_counts,
dates = unq_qts)
return(ans)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
dates = ymd(comp_list$date)
plot(x = dates,
y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
for(i in 1:nrow(comp_list$cnts)){
this_row = comp_list$cnts[i,]
lines(dates, this_row, col = i + 1)
}
legend("topright",
rownames(comp_list$cnts),
col = 1:nrow(comp_list$cnts) + 1,
lty = 1)
}
draw_counts(comp_counts)
sales_df = read.csv("sales.csv")
complaints_df = read.csv("complaints.csv")
summary(sales_df)
summary(complaints_df)
library(lubridate)
sales_date = mdy(sales_df$Date)
sales_month = paste(year(sales_date), month(sales_date), sep = "_")
sales_quarter = paste(year(sales_date), quarter(sales_date), sep = "_")
qt_sales = NULL
qt_time = NULL
unq_qt = unique(sales_quarter)
for(i in seq_along(unq_qt)){
d = unq_qt[i]
is_this_date = sales_quarter == d
this_sales = sum( sales_df$Quantity[is_this_date] )
qt_sales[i] = this_sales
qt_time[i] = d
}
plot(yq(unq_qt), qt_sales,
main = "Quarterly Sales",
ylab = "Sales (units)",
xlab = "Quarter")
comp_qt = yq(complaints_df$Quarter)
qt_comps = function(type = "Documentation", qts, data){
comp_type = data[[type]]
subset = comp_type == 1
comp_date = qts[subset]
tot_comps = table(comp_date)
return(tot_comps)
}
all_comps = colnames(complaints_df)[12:20]
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = c(all_comps)
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
ans = list(cnts = comp_counts,
dates = unq_qts)
return(ans)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
dates = ymd(comp_list$date)
plot(x = dates,
y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
for(i in 1:nrow(comp_list$cnts)){
this_row = comp_list$cnts[i,]
lines(dates, this_row, col = i + 1)
}
legend("topleft",
rownames(comp_list$cnts),
col = 1:nrow(comp_list$cnts) + 1,
lty = 1)
}
draw_counts(comp_counts)
sales_df = read.csv("sales.csv")
complaints_df = read.csv("complaints.csv")
summary(sales_df)
summary(complaints_df)
library(lubridate)
sales_date = mdy(sales_df$Date)
sales_month = paste(year(sales_date), month(sales_date), sep = "_")
sales_quarter = paste(year(sales_date), quarter(sales_date), sep = "_")
qt_sales = NULL
qt_time = NULL
unq_qt = unique(sales_quarter)
for(i in seq_along(unq_qt)){
d = unq_qt[i]
is_this_date = sales_quarter == d
this_sales = sum( sales_df$Quantity[is_this_date] )
qt_sales[i] = this_sales
qt_time[i] = d
}
plot(yq(unq_qt), qt_sales,
main = "Quarterly Sales",
ylab = "Sales (units)",
xlab = "Quarter")
comp_qt = yq(complaints_df$Quarter)
qt_comps = function(type = "Documentation", qts, data){
comp_type = data[[type]]
subset = comp_type == 1
comp_date = qts[subset]
tot_comps = table(comp_date)
return(tot_comps)
}
all_comps = colnames(complaints_df)[12:20]
make_all_comps = function(all_comps, data, qts){
qts = as.character(qts)
unq_qts = unique(qts)
comp_counts = matrix(0, nrow = length(all_comps), ncol = length(unq_qts))
rownames(comp_counts) = c(all_comps)
colnames(comp_counts) = unq_qts
for(c in all_comps){
this_counts = qt_comps(type = c, qts, data)
comp_counts[c, names(this_counts)] = this_counts
}
ans = list(cnts = comp_counts,
dates = unq_qts)
return(ans)
}
comp_counts = make_all_comps(all_comps, complaints_df, comp_qt)
draw_counts = function(comp_list){
max_comp = max(comp_list$cnts)
dates = ymd(comp_list$date)
plot(x = dates,
y = seq_along(comp_list$date),
ylim = c(0, max_comp),
col = NA)
for(i in 1:nrow(comp_list$cnts)){
this_row = comp_list$cnts[i,]
lines(dates, this_row, col = i + 1)
}
legend("topleft",
rownames(comp_list$cnts),
col = 1:nrow(comp_list$cnts) + 1,
lty = 1)
}
draw_counts(comp_counts)
library(icenReg)
data(miceData)
fit <- ic_sp(cbind(l,u) ~grp, data = miceData)
plot(fit)
library(icenReg)
data(miceData)
fit = ic_bayes(cbind(l, u) ~ 1, data = miceData)
fit = ic_bayes(cbind(l, u) ~ grp, data = miceData)
fit = ic_bayes(cbind(l, u) ~ 1, data = miceData)
install.packages(icenReg)
install.packages("icenReg")
setwd("~/Desktop/icenReg_devel/Code/icenReg")
library(Rcpp)
compileAttributes(verbose = T)
remove.packages("icenReg")
install.packages("icenReg")
library(icenReg)
?icenReg
??icenReg
library(icenReg)
data(miceData)
fit <- ic_par(cbind(l,u) ~ grp, data = miceData)
log(1.15, 10)
100 / (log(1.15) * 365)
exp(-.61)
log(0.5)
60000 / 300
200/24
260/60
